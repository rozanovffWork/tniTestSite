// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using tniTestSite.Data;

namespace tniTestSite.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.8-servicing-32085")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("tniTestSite.Data.Models.ConsumptionObject", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address");

                    b.Property<string>("Name");

                    b.Property<int>("OrganizationId");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.ToTable("ConsumptionObjects");
                });

            modelBuilder.Entity("tniTestSite.Data.Models.ElectricEnergyMeter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CounterType");

                    b.Property<int?>("ElectricityMeasurementPointId");

                    b.Property<string>("Number");

                    b.Property<DateTime>("VerificationDate");

                    b.HasKey("Id");

                    b.HasIndex("ElectricityMeasurementPointId")
                        .IsUnique()
                        .HasFilter("[ElectricityMeasurementPointId] IS NOT NULL");

                    b.ToTable("ElectricEnergyMeters");
                });

            modelBuilder.Entity("tniTestSite.Data.Models.ElectricityMeasurementPoint", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ConsumptionObjectId");

                    b.Property<int?>("ElectricEnergyMeterId");

                    b.Property<string>("Name");

                    b.Property<int?>("PowerTransformerId");

                    b.Property<int?>("VoltageTransformerId");

                    b.HasKey("Id");

                    b.HasIndex("ConsumptionObjectId");

                    b.ToTable("ElectricityMeasurementPoints");
                });

            modelBuilder.Entity("tniTestSite.Data.Models.ElectricitySupplyPoint", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ConsumptionObjectId");

                    b.Property<decimal>("MaximumPower")
                        .HasColumnType("decimal(18, 4)");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.HasIndex("ConsumptionObjectId");

                    b.ToTable("ElectricitySupplyPoints");
                });

            modelBuilder.Entity("tniTestSite.Data.Models.EstimatedMeteringDevice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ElectricitySupplyPointId");

                    b.HasKey("Id");

                    b.HasIndex("ElectricitySupplyPointId");

                    b.ToTable("EstimatedMeteringDevices");
                });

            modelBuilder.Entity("tniTestSite.Data.Models.Organization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Organizations");
                });

            modelBuilder.Entity("tniTestSite.Data.Models.PowerTransformer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ElectricityMeasurementPointId");

                    b.Property<string>("Number");

                    b.Property<double>("PowerTransformationRatio");

                    b.Property<string>("PowerTransformerType");

                    b.Property<DateTime>("VerificationDate");

                    b.HasKey("Id");

                    b.HasIndex("ElectricityMeasurementPointId")
                        .IsUnique()
                        .HasFilter("[ElectricityMeasurementPointId] IS NOT NULL");

                    b.ToTable("PowerTransformers");
                });

            modelBuilder.Entity("tniTestSite.Data.Models.SubsidiaryOrganization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address");

                    b.Property<int>("HeadOrganizationId");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.HasIndex("HeadOrganizationId");

                    b.ToTable("SubsidiaryOrganizations");
                });

            modelBuilder.Entity("tniTestSite.Data.Models.TimeSet", b =>
                {
                    b.Property<int>("ElectricityMeasurementPointId");

                    b.Property<int>("EstimatedMeteringDeviceId");

                    b.Property<DateTime?>("DateFinish");

                    b.Property<DateTime?>("DateStart");

                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.HasKey("ElectricityMeasurementPointId", "EstimatedMeteringDeviceId");

                    b.HasAlternateKey("Id");

                    b.HasIndex("EstimatedMeteringDeviceId");

                    b.ToTable("TimeSets");
                });

            modelBuilder.Entity("tniTestSite.Data.Models.VoltageTransformer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ElectricityMeasurementPointId");

                    b.Property<string>("Number");

                    b.Property<DateTime>("VerificationDate");

                    b.Property<double>("VoltageTransformationRatio");

                    b.Property<string>("VoltageTransformerType");

                    b.HasKey("Id");

                    b.HasIndex("ElectricityMeasurementPointId")
                        .IsUnique()
                        .HasFilter("[ElectricityMeasurementPointId] IS NOT NULL");

                    b.ToTable("VoltageTransformer");
                });

            modelBuilder.Entity("tniTestSite.Data.Models.ConsumptionObject", b =>
                {
                    b.HasOne("tniTestSite.Data.Models.SubsidiaryOrganization", "Organization")
                        .WithMany("ConsumptionObjects")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("tniTestSite.Data.Models.ElectricEnergyMeter", b =>
                {
                    b.HasOne("tniTestSite.Data.Models.ElectricityMeasurementPoint", "ElectricityMeasurementPoint")
                        .WithOne("ElectricEnergyMeter")
                        .HasForeignKey("tniTestSite.Data.Models.ElectricEnergyMeter", "ElectricityMeasurementPointId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("tniTestSite.Data.Models.ElectricityMeasurementPoint", b =>
                {
                    b.HasOne("tniTestSite.Data.Models.ConsumptionObject", "ConsumptionObject")
                        .WithMany("ElectricityMeasurementPoints")
                        .HasForeignKey("ConsumptionObjectId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("tniTestSite.Data.Models.ElectricitySupplyPoint", b =>
                {
                    b.HasOne("tniTestSite.Data.Models.ConsumptionObject", "ConsumptionObject")
                        .WithMany("ElectricitySupplyPoints")
                        .HasForeignKey("ConsumptionObjectId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("tniTestSite.Data.Models.EstimatedMeteringDevice", b =>
                {
                    b.HasOne("tniTestSite.Data.Models.ElectricitySupplyPoint", "ElectricitySupplyPoint")
                        .WithMany("EstimatedMeteringDevices")
                        .HasForeignKey("ElectricitySupplyPointId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("tniTestSite.Data.Models.PowerTransformer", b =>
                {
                    b.HasOne("tniTestSite.Data.Models.ElectricityMeasurementPoint", "ElectricityMeasurementPoint")
                        .WithOne("PowerTransformer")
                        .HasForeignKey("tniTestSite.Data.Models.PowerTransformer", "ElectricityMeasurementPointId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("tniTestSite.Data.Models.SubsidiaryOrganization", b =>
                {
                    b.HasOne("tniTestSite.Data.Models.Organization", "HeadOrganization")
                        .WithMany("SubsidiaryOrganizations")
                        .HasForeignKey("HeadOrganizationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("tniTestSite.Data.Models.TimeSet", b =>
                {
                    b.HasOne("tniTestSite.Data.Models.ElectricityMeasurementPoint", "ElectricityMeasurementPoint")
                        .WithMany("TimeSets")
                        .HasForeignKey("ElectricityMeasurementPointId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("tniTestSite.Data.Models.EstimatedMeteringDevice", "EstimatedMeteringDevice")
                        .WithMany("TimeSets")
                        .HasForeignKey("EstimatedMeteringDeviceId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("tniTestSite.Data.Models.VoltageTransformer", b =>
                {
                    b.HasOne("tniTestSite.Data.Models.ElectricityMeasurementPoint", "ElectricityMeasurementPoint")
                        .WithOne("VoltageTransformer")
                        .HasForeignKey("tniTestSite.Data.Models.VoltageTransformer", "ElectricityMeasurementPointId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
